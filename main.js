"use strict";
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PluginSummaryPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var PluginSummaryPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("\u52A0\u8F7D\u7684\u8BBE\u7F6E\uFF1A", this.settings);
    this.addCommand({
      id: "summarize-plugins",
      name: "\u6C47\u603B\u5DF2\u5B89\u88C5\u63D2\u4EF6",
      callback: () => this.summarizePlugins()
    });
    this.addSettingTab(new PluginSummarySettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async summarizePlugins() {
    console.log("\u5F00\u59CB\u751F\u6210\u63D2\u4EF6\u6C47\u603B");
    const plugins = this.app.plugins;
    let summary = "# \u5DF2\u5B89\u88C5\u7684Obsidian\u63D2\u4EF6\u6C47\u603B\n\n";
    const installedPlugins = Object.entries(plugins.manifests);
    console.log(`\u627E\u5230 ${installedPlugins.length} \u4E2A\u5DF2\u5B89\u88C5\u63D2\u4EF6`);
    for (const [id, manifest] of installedPlugins) {
      console.log(`\u5904\u7406\u63D2\u4EF6: ${id}`);
      if (!manifest) {
        console.log(`\u8B66\u544A: \u63D2\u4EF6 ${id} \u6CA1\u6709 manifest`);
        continue;
      }
      summary += `## ${manifest.name || "\u672A\u77E5\u540D\u79F0"}
`;
      summary += `- ID: ${id}
`;
      summary += `- \u63CF\u8FF0: ${manifest.description || "\u65E0\u63CF\u8FF0"}
`;
      summary += `- \u7248\u672C: ${manifest.version || "\u672A\u77E5\u7248\u672C"}
`;
      summary += `- \u4F5C\u8005: ${manifest.author || "\u672A\u77E5\u4F5C\u8005"}
`;
      summary += `- \u4ED3\u5E93: ${manifest.repo || "\u672A\u63D0\u4F9B"}

`;
    }
    console.log("\u6C47\u603B\u5185\u5BB9\u751F\u6210\u5B8C\u6BD5\uFF0C\u51C6\u5907\u5199\u5165\u6587\u4EF6");
    const fileName = (0, import_obsidian.normalizePath)(this.settings.summaryFilePath);
    console.log("\u6587\u4EF6\u8DEF\u5F84\uFF1A", fileName);
    try {
      await this.app.vault.adapter.write(fileName, summary);
      console.log("\u6587\u4EF6\u5199\u5165\u6210\u529F");
      const file = this.app.vault.getAbstractFileByPath(fileName);
      if (file instanceof import_obsidian.TFile) {
        await this.app.workspace.openLinkText(file.path, "", true);
        console.log("\u6587\u4EF6\u5DF2\u6253\u5F00");
      } else {
        console.log("\u6587\u4EF6\u672A\u627E\u5230\u6216\u65E0\u6CD5\u6253\u5F00");
      }
      new import_obsidian.Notice("\u63D2\u4EF6\u6C47\u603B\u5DF2\u751F\u6210");
    } catch (error) {
      console.error("\u5199\u5165\u6587\u4EF6\u65F6\u51FA\u9519\uFF1A", error);
      new import_obsidian.Notice("\u751F\u6210\u6C47\u603B\u65F6\u51FA\u9519\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0");
    }
  }
};
var DEFAULT_SETTINGS = {
  summaryFilePath: "plugin-summary.md"
};
var PluginSummarySettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u63D2\u4EF6\u6C47\u603B\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u6C47\u603B\u6587\u4EF6\u8DEF\u5F84").setDesc("\u8BBE\u7F6E\u63D2\u4EF6\u6C47\u603B\u4FE1\u606F\u4FDD\u5B58\u7684\u6587\u4EF6\u8DEF\u5F84\uFF08\u5305\u62EC\u6587\u4EF6\u540D\uFF09").addText((text) => text.setPlaceholder("\u4F8B\u5982\uFF1A\u63D2\u4EF6/plugin-summary.md").setValue(this.plugin.settings.summaryFilePath).onChange(async (value) => {
      this.plugin.settings.summaryFilePath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u751F\u6210\u6C47\u603B").setDesc("\u70B9\u51FB\u6309\u94AE\u751F\u6210\u63D2\u4EF6\u6C47\u603B").addButton((button) => button.setButtonText("\u751F\u6210\u6C47\u603B").onClick(async () => {
      try {
        await this.plugin.summarizePlugins();
        new import_obsidian.Notice("\u63D2\u4EF6\u6C47\u603B\u5DF2\u751F\u6210");
      } catch (error) {
        console.error("\u751F\u6210\u6C47\u603B\u65F6\u51FA\u9519\uFF1A", error);
        new import_obsidian.Notice("\u751F\u6210\u6C47\u603B\u65F6\u51FA\u9519\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0");
      }
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
